# 폼 입력 바인딩

Created: December 1, 2021
Created by: Anonymous
Tags: vue

## 기본사용법

v-model 디렉티브를 사용하여 폼 input 과 textarea 엘리번트에 양방향 데이터 바인딩을 생성할 수 있습니다. 

해당 기능은 javascript 에서 jquery를 사용할 경우

```jsx
function getText(){
	var text = $('.classname').text();
	console.log(text);
}

setInterval(getText(), 1000);
```

와 유사한 기능이라고 생각하면 됩니다. 

text 와 textarea 태그는 value 속성과 input 이벤트를 사용합니다. 

checkbox, radio 는 checked 속성과 change 이벤트를 사용합니다. 

### 문자열

```jsx
<input v-model="message" placeholder="여기를 수정해보세요">
<p>메시지: {{ message }}</p>
```

input 에 데이터 값을 입력하여 value 값이 변경 될 때 마다 {{ Message }}에도 값이 변함

### 여러줄을 가진 문장

```jsx
<span>여러 줄을 가지는 메시지:</span>
<p style="white-space: pre-line">{{ message }}</p>
<br>
<textarea v-model="message" placeholder="여러줄을 입력해보세요"></textarea>
```

textarea 에 입력된 값이 보여짐 

### 체크박스

하나의 체크박스는 단일 boolean 값을 가집니다. 

```jsx
<input type="checkbox" id="checkbox" v-model="checked">
<label for="checkbox">{{ checked }}</label>
```

check box 를 선택하면 true 가 표시되고 해제 할 경우 false 가 보여짐

```jsx
<div id='example-3'>
  <input type="checkbox" id="jack" value="Jack" v-model="checkedNames">
  <label for="jack">Jack</label>
  <input type="checkbox" id="john" value="John" v-model="checkedNames">
  <label for="john">John</label>
  <input type="checkbox" id="mike" value="Mike" v-model="checkedNames">
  <label for="mike">Mike</label>
  <br>
  <span>체크한 이름: {{ checkedNames }}</span>
</div>
```

여러개의 체크박스는 같은 배열을 바인딩 할 수 있음 

체크한 항목의 이름들만 보여짐 

### 라디오

```jsx
<input type="radio" id="one" value="One" v-model="picked">
<label for="one">One</label>
<br>
<input type="radio" id="two" value="Two" v-model="picked">
<label for="two">Two</label>
<br>
<span>선택: {{ picked }}</span>
```

type="radio"일 경우

### 셀렉트

```jsx
<select v-model="selected">
  <option disabled value="">Please select one</option>
  <option>A</option>
  <option>B</option>
  <option>C</option>
</select>
<span>선택함: {{ selected }}</span>
```

selected 된 값이 보여집니다. 

```jsx
<select v-model="selected" multiple>
  <option>A</option>
  <option>B</option>
  <option>C</option>
</select>
<br>
<span>Selected: {{ selected }}</span>
```

다중 선택이 가능한 multi select 는 해당 값이 배열로 보여집니다.

동적으로 select  의 option 도 랜더링 할 수 있습니다. 

```jsx
<select v-model="selected">
  <option v-for="option in options" v-bind:value="option.value">
    {{ option.text }}
  </option>
</select>
<span>Selected: {{ selected }}</span>

//option
options: [
          { text: 'One', value: 'A' },
          { text: 'Two', value: 'B' },
          { text: 'Three', value: 'C' }
        ]
```

option 값의 text 들이 보여집니다. 

## 값 바인딩

라디오, 체크박스 및 셀렉트 옵션의 경우 v-model 바인딩 값은 보통 정적인 문자열입니다. 

```html
<!-- `picked` 는 선택시 문자열 "a" 입니다 -->
<input type="radio" v-model="picked" value="a">

<!-- `toggle` 는 true 또는 false 입니다 -->
<input type="checkbox" v-model="toggle">

<!-- `selected`는 "ABC" 선택시 "abc" 입니다 -->
<select v-model="selected">
  <option value="abc">ABC</option>
</select>
```

### 체크박스

checkbox 인 경우 true, false 로 표현되지만 아래와 같이 설정할 경우 해당 값을 변경 할 수 있다. 

```html
<input
  type="checkbox"
  v-model="toggle"
  true-value="yes"
  false-value="no"
>

<!-- 
// 체크된 경우
vm.toggle === 'yes'
// 체크 되지 않은 경우
vm.toggle === 'no'
-->
```

### 라디오

```html
<input type="radio" v-model="pick" v-bind:value="a">
```

### 셀렉트

```html
<select v-model="selected">
  <!-- inline object literal -->
  <option v-bind:value="{ number: 123 }">123</option>
</select>

<!--
typeof vm.selected // -> 'object'
vm.selected.number // -> 123
-->
```

## 수식어

### .lazy

```html
<input v-model.trim="msg">
<div>메세지 : {{msg}}</div>
```

내용이 다 입력 된후 cursor 가 떠나게 될 경우 {{msg}}에 입력한 값이 보여짐.

### .number

```html
<input v-model.number="age" type="number">
```

사용자 입력이 자동으로 숫자로 형변환됨.

### .trim

```html
<input v-model.trim("ㅇㅇㅇ")="msg">
```

폼정보를 가져올 때 문자열 양끝의 여백은 사용하지 않음.